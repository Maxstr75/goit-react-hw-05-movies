{"version":3,"file":"static/js/movies-page.194cb2d0.chunk.js","mappings":"8LAGaA,EAAY,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MAC7BC,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,IAAa,WAAD,OAAYL,GAAW,CAAEA,QAAAA,IAEvD,OACE,+BACE,wBACE,eAAIM,GAAIF,EAAWG,MAAO,CAAEC,KAAMN,GAAlC,SACGD,KAFGD,IAOb,C,+JCZYS,EAAa,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC3B,GAA0CC,EAAAA,EAAAA,MAAlCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,MAahC,OACE,+BACE,kBAAMC,SAAUF,GAbH,SAAC,GAAe,IACzBG,EADwB,EAAZC,MACYC,OAE9B,IAAKF,EACH,OAAOG,EAAAA,EAAAA,IAAM,0BAGfT,EAASM,GACTF,GACD,IAIG,WACE,oCACMF,EAAS,UADf,IAEEQ,KAAK,OACLC,YAAY,eACZC,aAAa,MACbC,WAAS,MAEX,mBAAQH,KAAK,SAAb,wBAIP,E,8BCWD,EArCoB,WAAO,IAAD,EACxB,GAAwCI,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BC,EAAAA,EAAAA,UAAQ,UAACF,EAAaG,IAAI,iBAAlB,QAA+B,IAAnE,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BH,EAAAA,EAAAA,UAAS,IAAnC,eAAOI,EAAP,KAAcC,EAAd,KACA,GAA0BL,EAAAA,EAAAA,UAAS,MAAnC,eAAOM,EAAP,KAAcC,EAAd,KAsBA,OApBAC,EAAAA,EAAAA,YAAU,WACR,GAAe,KAAXN,EAAJ,CAGAH,EAAgB,CAAEG,OAAAA,IAElB,IAAMO,EAAS,mCAAG,gHAIJC,EAAAA,EAAAA,IAAoBR,GAJhB,gBAGJS,EAHI,EAGZC,KAAQD,QAGVN,EAASM,GANK,gDAQdJ,EAAS,KAAEM,SARG,yDAAH,qDAWfJ,GAdC,CAeF,GAAE,CAACP,EAAQH,KAGV,iCACE,SAACjB,EAAD,CAAYC,SAAUoB,IACrBG,IAAS,uBAAIA,IACbF,EAAMU,KAAI,YAAoB,IAAjBxC,EAAgB,EAAhBA,MAAOyC,EAAS,EAATA,GACnB,OAAO,SAAC3C,EAAA,EAAD,CAAoBC,QAAS0C,EAAIzC,MAAOA,GAAxByC,EACxB,MAGN,C,oICxCDC,IAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAGHC,EAAW,mCAAG,8FACZF,IAAAA,IAAA,qCAAwCC,IAD5B,mFAAH,qDAKXP,EAAmB,mCAAG,WAAMS,GAAN,iFACpBH,IAAAA,IAAA,+BAAkCC,EAAlC,kBAAmDE,IAD/B,mFAAH,qD","sources":["components/MovieList/MovieList.jsx","components/SearchForm/SearchForm.jsx","pages/MoviesPage.jsx","services/api.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { useLocation, generatePath } from 'react-router-dom';\n\nexport const MovieList = ({ movieId, title }) => {\n  const location = useLocation();\n  const movieList = generatePath(`/movies/${movieId}`, { movieId });\n\n  return (\n    <>\n      <p key={movieId}>\n        <li to={movieList} state={{ from: location }}>\n          {title}\n        </li>\n      </p>\n    </>\n  );\n};\n\nMovieList.propTypes = {\n  title: PropTypes.string.isRequired,\n  movieId: PropTypes.number.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\nimport { toast } from 'react-toastify';\n\nexport const SearchForm = ({ onSearch }) => {\n  const { register, handleSubmit, reset } = useForm();\n\n  const onSubmit = ({ query }) => {\n    const queryNormalized = query.trim();\n\n    if (!queryNormalized) {\n      return toast('Please, enter the text');\n    }\n\n    onSearch(queryNormalized);\n    reset();\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <input\n          {...register('query')}\n          type=\"text\"\n          placeholder=\"Movie Search\"\n          autoComplete=\"off\"\n          autoFocus\n        />\n        <submit type=\"submit\">Search</submit>\n      </form>\n    </>\n  );\n};\n\nSearchForm.propTypes = {\n  onSearch: PropTypes.func.isRequired,\n};\n","import { MovieList } from 'components/MovieList/MovieList';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchMoviesBySearch } from 'services/api';\n\nconst MoviesPages = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [search, setSearch] = useState(searchParams.get('search') ?? '');\n  const [films, setFilms] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (search === '') {\n      return;\n    }\n    setSearchParams({ search });\n\n    const fetchData = async () => {\n      try {\n        const {\n          data: { results },\n        } = await fetchMoviesBySearch(search);\n\n        setFilms(results);\n      } catch (e) {\n        setError(e.message);\n      }\n    };\n    fetchData();\n  }, [search, setSearchParams]);\n\n  return (\n    <>\n      <SearchForm onSearch={setSearch} />\n      {error && <p>{error}</p>}\n      {films.map(({ title, id }) => {\n        return <MovieList key={id} movieId={id} title={title} />;\n      })}\n    </>\n  );\n};\n\nexport default MoviesPages;\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '827cb17c4a19aaac58b5a69a05bdba2b';\n\n// Поиск по трендам самых популярных фильмов на сегодня для создания коллекции на главной странице.\nexport const fetchTrends = async () => {\n  return await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n};\n\n// Поиск фильма по ключевому слову на странице фильмов\nexport const fetchMoviesBySearch = async name => {\n  return await axios.get(`search/movie?api_key=${API_KEY}&query=${name}`);\n};\n\n//  Поиск по ID - запрос полной информации о фильме для страницы кинофильма\nexport const fetchMovieDetails = async id => {\n  return await axios.get(`movie/${id}?api_key=${API_KEY}`);\n};\n\n// Запрос актеров\nexport const fetchCast = async id => {\n  return await axios.get(`movie/${id}/credits?api_key=${API_KEY}`);\n};\n\n// Запрос обзоров о фильме\nexport const fetchReviews = async id => {\n  return await axios.get(`movie/${id}/reviews?api_key=${API_KEY}`);\n};\n"],"names":["MovieList","movieId","title","location","useLocation","movieList","generatePath","to","state","from","SearchForm","onSearch","useForm","register","handleSubmit","reset","onSubmit","queryNormalized","query","trim","toast","type","placeholder","autoComplete","autoFocus","useSearchParams","searchParams","setSearchParams","useState","get","search","setSearch","films","setFilms","error","setError","useEffect","fetchData","fetchMoviesBySearch","results","data","message","map","id","axios","API_KEY","fetchTrends","name"],"sourceRoot":""}