{"version":3,"file":"static/js/movies-page.10ff3dc8.chunk.js","mappings":"sNAGaA,EAAWC,EAAAA,EAAAA,GAAH,0CAIRC,GAAaD,EAAAA,EAAAA,GAAOE,EAAAA,GAAPF,CAAH,qU,SCHVG,EAAY,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MAC7BC,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,IAAa,WAAD,OAAYL,GAAW,CAAEA,QAAAA,IAEvD,OACE,+BACE,SAACL,EAAD,WACE,SAACE,EAAD,CAAYS,GAAIF,EAAWG,MAAO,CAAEC,KAAMN,GAA1C,SACGD,KAFUD,IAOpB,C,2ICfYS,EAAab,EAAAA,EAAAA,IAAH,0CAIVc,EAAed,EAAAA,EAAAA,KAAH,sGAKZe,EAAcf,EAAAA,EAAAA,MAAH,gIASXgB,EAAahB,EAAAA,EAAAA,OAAH,+G,SCVViB,EAAa,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC3B,GAA0CC,EAAAA,EAAAA,MAAlCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,MAahC,OACE,SAACT,EAAD,WACE,UAACC,EAAD,CAAcS,SAAUF,GAbX,SAAC,GAAe,IAAbG,EAAY,EAAZA,MAClB,GAAqB,KAAjBA,EAAMC,OACR,OAAOC,EAAAA,EAAAA,IAAM,6BAA8B,CACzCC,UAAW,MAIfT,EAASM,GACTF,GACD,IAIG,WACE,SAACP,GAAD,kBACMK,EAAS,UADf,IAEEQ,KAAK,OACLC,YAAY,sBACZC,aAAa,MACbC,WAAS,MAEX,SAACf,EAAD,CAAYY,KAAK,SAAjB,wBAIP,E,oECpBD,EAdoB,WAClB,MCDoC,WAAO,IAAD,EAC1C,GAAwCI,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BC,EAAAA,EAAAA,UAAQ,UAACF,EAAaG,IAAI,iBAAlB,QAA+B,IAAnE,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BH,EAAAA,EAAAA,UAAS,IAAnC,eAAOI,EAAP,KAAcC,EAAd,KACA,GAA0BL,EAAAA,EAAAA,UAAS,MAAnC,eAAOM,EAAP,KAAcC,EAAd,KAsBA,OApBAC,EAAAA,EAAAA,YAAU,WACR,GAAe,KAAXN,EAAJ,CAGAH,EAAgB,CAAEG,OAAAA,IAElB,IAAMO,EAAS,mCAAG,gHAIJC,EAAAA,EAAAA,IAAoBR,GAJhB,gBAGJS,EAHI,EAGZC,KAAQD,QAGVN,EAASM,GANK,gDAQdJ,EAAS,KAAEM,SARG,yDAAH,qDAWfJ,GAdC,CAeF,GAAE,CAACP,EAAQH,IAEL,CAAEI,UAAAA,EAAWC,MAAAA,EAAOE,MAAAA,EAC5B,CD1BqCQ,GAA5BX,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOE,EAA1B,EAA0BA,MAE1B,OACE,iCACE,SAACxB,EAAD,CAAYC,SAAUoB,IACrBG,IAAS,uBAAIA,IACbF,EAAMW,KAAI,YAAoB,IAAjB7C,EAAgB,EAAhBA,MAAO8C,EAAS,EAATA,GACnB,OAAO,SAAChD,EAAA,EAAD,CAAoBC,QAAS+C,EAAI9C,MAAOA,GAAxB8C,EACxB,MAGN,C,2MEfDC,IAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAGHC,EAAW,mCAAG,8FACZF,IAAAA,IAAA,qCAAwCC,IAD5B,mFAAH,qDAKXR,EAAmB,mCAAG,WAAMU,GAAN,iFACpBH,IAAAA,IAAA,+BAAkCC,EAAlC,kBAAmDE,IAD/B,mFAAH,sDAKnBC,EAAiB,mCAAG,WAAML,GAAN,iFAClBC,IAAAA,IAAA,gBAAmBD,EAAnB,oBAAiCE,IADf,mFAAH,sDAKjBI,EAAS,mCAAG,WAAMN,GAAN,iFACVC,IAAAA,IAAA,gBAAmBD,EAAnB,4BAAyCE,IAD/B,mFAAH,sDAKTK,EAAY,mCAAG,WAAMP,GAAN,iFACbC,IAAAA,IAAA,gBAAmBD,EAAnB,4BAAyCE,IAD5B,mFAAH,qD","sources":["components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.jsx","pages/MoviesPage.jsx","hooks/useFetchMoviesBySearch.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const LinkItem = styled.li`\n  padding: 20px;\n`;\n\nexport const LinkStyled = styled(Link)`\n  color: royalBlue;\n  :hover {\n    color: red;\n  }\n\n  color: dodgerBlue;\n\n  text-align: left;\n  margin-bottom: 0;\n\n  @media (min-width: 768px) {\n    font-size: 22px;\n  }\n  @media (min-width: 1024px) {\n    font-size: 30px;\n  }\n  @media (min-width: 1280px) {\n    font-size: 34px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useLocation, generatePath } from 'react-router-dom';\nimport { LinkItem, LinkStyled } from './MovieList.styled';\n\nexport const MovieList = ({ movieId, title }) => {\n  const location = useLocation();\n  const movieLink = generatePath(`/movies/${movieId}`, { movieId });\n\n  return (\n    <>\n      <LinkItem key={movieId}>\n        <LinkStyled to={movieLink} state={{ from: location }}>\n          {title}\n        </LinkStyled>\n      </LinkItem>\n    </>\n  );\n};\n\nMovieList.propTypes = {\n  title: PropTypes.string.isRequired,\n  movieId: PropTypes.number.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const StyledForm = styled.div`\n  display: flex;\n`;\n\nexport const StyledSubmit = styled.form`\n  border-bottom: 1px solid #ffffff;\n  box-shadow: 0px 2px 10px 1px #240b36;\n`;\n\nexport const InputSearch = styled.input`\n  height: 100%;\n  letter-spacing: 0.1em;\n  outline: none;\n  ::placeholder {\n    opacity: 0.8;\n  }\n`;\n\nexport const SubmitType = styled.button`\n  padding: 12px;\n  :hover {\n    color: red;\n    background-color: mediumBlue;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\nimport { toast } from 'react-toastify';\nimport {\n  StyledForm,\n  StyledSubmit,\n  InputSearch,\n  SubmitType,\n} from './SearchForm.styled';\n\nexport const SearchForm = ({ onSearch }) => {\n  const { register, handleSubmit, reset } = useForm();\n\n  const onSubmit = ({ query }) => {\n    if (query.trim() === '') {\n      return toast('Please specify your query!', {\n        autoClose: 3000,\n      });\n    }\n\n    onSearch(query);\n    reset();\n  };\n\n  return (\n    <StyledForm>\n      <StyledSubmit onSubmit={handleSubmit(onSubmit)}>\n        <InputSearch\n          {...register('query')}\n          type=\"text\"\n          placeholder=\"Please search movie\"\n          autoComplete=\"off\"\n          autoFocus\n        />\n        <SubmitType type=\"submit\">Search</SubmitType>\n      </StyledSubmit>\n    </StyledForm>\n  );\n};\n\nSearchForm.propTypes = {\n  onSearch: PropTypes.func.isRequired,\n};\n","import { MovieList } from 'components/MovieList/MovieList';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\nimport { useFetchMoviesBySearch } from 'hooks/useFetchMoviesBySearch';\n\nconst MoviesPages = () => {\n  const { setSearch, films, error } = useFetchMoviesBySearch();\n\n  return (\n    <>\n      <SearchForm onSearch={setSearch} />\n      {error && <p>{error}</p>}\n      {films.map(({ title, id }) => {\n        return <MovieList key={id} movieId={id} title={title} />;\n      })}\n    </>\n  );\n};\n\nexport default MoviesPages;\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchMoviesBySearch } from 'services/api';\n\nexport const useFetchMoviesBySearch = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [search, setSearch] = useState(searchParams.get('search') ?? '');\n  const [films, setFilms] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (search === '') {\n      return;\n    }\n    setSearchParams({ search });\n\n    const fetchData = async () => {\n      try {\n        const {\n          data: { results },\n        } = await fetchMoviesBySearch(search);\n\n        setFilms(results);\n      } catch (e) {\n        setError(e.message);\n      }\n    };\n    fetchData();\n  }, [search, setSearchParams]);\n\n  return { setSearch, films, error };\n};\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '827cb17c4a19aaac58b5a69a05bdba2b';\n\n// Поиск по трендам самых популярных фильмов на сегодня для создания коллекции на главной странице.\nexport const fetchTrends = async () => {\n  return await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n};\n\n// Поиск фильма по ключевому слову на странице фильмов\nexport const fetchMoviesBySearch = async name => {\n  return await axios.get(`search/movie?api_key=${API_KEY}&query=${name}`);\n};\n\n//  Поиск по ID - запрос полной информации о фильме для страницы кинофильма\nexport const fetchMovieDetails = async id => {\n  return await axios.get(`movie/${id}?api_key=${API_KEY}`);\n};\n\n// Запрос актеров\nexport const fetchCast = async id => {\n  return await axios.get(`movie/${id}/credits?api_key=${API_KEY}`);\n};\n\n// Запрос обзоров о фильме\nexport const fetchReviews = async id => {\n  return await axios.get(`movie/${id}/reviews?api_key=${API_KEY}`);\n};\n"],"names":["LinkItem","styled","LinkStyled","Link","MovieList","movieId","title","location","useLocation","movieLink","generatePath","to","state","from","StyledForm","StyledSubmit","InputSearch","SubmitType","SearchForm","onSearch","useForm","register","handleSubmit","reset","onSubmit","query","trim","toast","autoClose","type","placeholder","autoComplete","autoFocus","useSearchParams","searchParams","setSearchParams","useState","get","search","setSearch","films","setFilms","error","setError","useEffect","fetchData","fetchMoviesBySearch","results","data","message","useFetchMoviesBySearch","map","id","axios","API_KEY","fetchTrends","name","fetchMovieDetails","fetchCast","fetchReviews"],"sourceRoot":""}