{"version":3,"file":"static/js/movie-details-page.29e0d515.chunk.js","mappings":"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","sources":["components/MovieDetails/MovieDetails.styled.js","components/MovieDetails/MovieDetails.jsx","pages/MovieDetailsPage.jsx","hooks/useFetchMovieDetails.jsx","services/api.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from '@emotion/styled';\n\nexport const MovieInfo = styled.div`\n  display: flex;\n  padding-top: 20px;\n`;\n\nexport const InfoBox = styled.ul`\n  margin-left: 20px;\n`;\n\nexport const MovieItem = styled.li`\n  :not(:last-child) {\n    margin-bottom: 20px;\n  }\n`;\n\nexport const MovieLabel = styled.p`\n  font-size: 26px;\n`;\n\nexport const MoreInfo = styled.div`\n  padding: 12px;\n  border-top: 1px solid gray;\n  border-bottom: 1px solid gray;\n`;\n\nexport const MoreLink = styled(Link)`\n  display: inline-block;\n  padding: 4px;\n  font-size: 22px;\n  color: blue;\n  :hover {\n    color: red;\n  }\n  font-size: 18px;\n  font-weight: 700;\n  color: blue;\n\n  text-align: left;\n  margin-bottom: 0;\n\n  @media (min-width: 768px) {\n    font-size: 22px;\n  }\n  @media (min-width: 1024px) {\n    font-size: 30px;\n  }\n  @media (min-width: 1280px) {\n    font-size: 34px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport {\n  InfoBox,\n  MovieInfo,\n  MovieItem,\n  MovieLabel,\n  MoreLink,\n  MoreInfo,\n} from './MovieDetails.styled';\n\nexport const MovieDetails = ({\n  film: { poster_path, release_date, vote_average, genres, title, overview },\n  movieId,\n  backFrom,\n}) => {\n  const filmPoster = poster_path\n    ? `https://image.tmdb.org/t/p/original${poster_path}`\n    : 'https://upload.wikimedia.org/wikipedia/commons/archive/a/ac/20121003093557%21No_image_available.svg';\n\n  const releaseDate = release_date.slice(0, 4);\n  const userScore = vote_average.toFixed(1) * 10;\n  const genresList = genres.map(e => e.name).join(', ');\n\n  return (\n    <>\n      <MovieInfo>\n        <img src={filmPoster} alt={title} width={300} height={450} />\n        <InfoBox>\n          <MovieItem>\n            <h1>\n              {title} ({releaseDate})\n            </h1>\n            <p>User Score: {userScore}%</p>\n          </MovieItem>\n          <MovieItem>\n            <MovieLabel>Overview</MovieLabel>\n            <p>{overview}</p>\n          </MovieItem>\n          <MovieItem>\n            <MovieLabel>Genres</MovieLabel>\n            <p>{genresList}</p>\n          </MovieItem>\n        </InfoBox>\n      </MovieInfo>\n      <MoreInfo>\n        <p>More information</p>\n        <ul>\n          <li>\n            <MoreLink\n              to={`/movies/${movieId}/cast`}\n              state={{ from: backFrom.current }}\n            >\n              --- Cast ---\n            </MoreLink>\n          </li>\n          <li>\n            <MoreLink\n              to={`/movies/${movieId}/reviews`}\n              state={{ from: backFrom.current }}\n            >\n              --- Reviews ---\n            </MoreLink>\n          </li>\n        </ul>\n      </MoreInfo>\n    </>\n  );\n};\n\nMovieDetails.propTypes = {\n  film: PropTypes.shape({\n    poster_path: PropTypes.string,\n    release_date: PropTypes.string.isRequired,\n    vote_average: PropTypes.number.isRequired,\n    genres: PropTypes.array.isRequired,\n    title: PropTypes.string.isRequired,\n    overview: PropTypes.string.isRequired,\n  }),\n  movieId: PropTypes.string.isRequired,\n  backFrom: PropTypes.object.isRequired,\n};\n","import { Suspense } from 'react';\nimport { Link, Outlet } from 'react-router-dom';\nimport { IoArrowBackOutline } from 'react-icons/io5';\nimport { MovieDetails } from 'components/MovieDetails/MovieDetails';\nimport { useFetchMovieDetails } from 'hooks/useFetchMovieDetails';\n\nconst MovieDetailsPage = () => {\n  const { film, error, backLinkHref, movieId, backFrom } =\n    useFetchMovieDetails();\n\n  return (\n    <>\n      <Link to={backLinkHref}>\n        <IoArrowBackOutline />\n        Go back\n      </Link>\n      {error && <p>{error}</p>}\n      {film && (\n        <>\n          <MovieDetails film={film} movieId={movieId} backFrom={backFrom} />\n          <Suspense fallback={<div>Loading...</div>}>\n            <Outlet />\n          </Suspense>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default MovieDetailsPage;\n","import { useState, useEffect, useRef } from 'react';\nimport { fetchMovieDetails } from 'services/api';\nimport { useParams, useLocation, useNavigate } from 'react-router-dom';\n\nexport const useFetchMovieDetails = () => {\n  const [film, setFilm] = useState(null);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n  const navigate = useNavigate();\n\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n  const backFrom = useRef(backLinkHref);\n\n  useEffect(() => {\n    if (movieId === '') {\n      return;\n    }\n    const fetchData = async () => {\n      try {\n        const { data } = await fetchMovieDetails(movieId);\n        setFilm(data);\n      } catch (e) {\n        if (e.response.status === 404) {\n          return navigate(`/`);\n        }\n        setError(e.message);\n      }\n    };\n    fetchData();\n  }, [movieId, navigate]);\n\n  return { film, error, backLinkHref, movieId, backFrom };\n};\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '827cb17c4a19aaac58b5a69a05bdba2b';\n\n// Поиск по трендам самых популярных фильмов на сегодня для создания коллекции на главной странице.\nexport const fetchTrends = async () => {\n  return await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n};\n\n// Поиск фильма по ключевому слову на странице фильмов\nexport const fetchMoviesBySearch = async name => {\n  return await axios.get(`search/movie?api_key=${API_KEY}&query=${name}`);\n};\n\n//  Поиск по ID - запрос полной информации о фильме для страницы кинофильма\nexport const fetchMovieDetails = async id => {\n  return await axios.get(`movie/${id}?api_key=${API_KEY}`);\n};\n\n// Запрос актеров\nexport const fetchCast = async id => {\n  return await axios.get(`movie/${id}/credits?api_key=${API_KEY}`);\n};\n\n// Запрос обзоров о фильме\nexport const fetchReviews = async id => {\n  return await axios.get(`movie/${id}/reviews?api_key=${API_KEY}`);\n};\n"],"names":["MovieInfo","styled","InfoBox","MovieItem","MovieLabel","MoreInfo","MoreLink","Link","MovieDetails","film","poster_path","release_date","vote_average","genres","title","overview","movieId","backFrom","filmPoster","releaseDate","slice","userScore","toFixed","genresList","map","e","name","join","src","alt","width","height","to","state","from","current","useState","setFilm","error","setError","useParams","navigate","useNavigate","backLinkHref","useLocation","useRef","useEffect","fetchData","fetchMovieDetails","data","response","status","message","useFetchMovieDetails","Suspense","fallback","axios","API_KEY","fetchTrends","fetchMoviesBySearch","id","fetchCast","fetchReviews"],"sourceRoot":""}