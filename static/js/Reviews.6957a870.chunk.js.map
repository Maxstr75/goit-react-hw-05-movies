{"version":3,"file":"static/js/Reviews.6957a870.chunk.js","mappings":"8NAkDA,UA9CgB,WACd,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA4BF,EAAAA,EAAAA,WAAS,GAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,gHAIJC,EAAAA,EAAAA,IAAaJ,GAJT,gBAGJK,EAHI,EAGZC,KAAQD,QAGVV,EAAWU,GACXR,GAAU,GAPI,gDASdE,EAAS,KAAEQ,SATG,yDAAH,qDAYfJ,GACD,GAAE,CAACH,IAEJ,IAAMQ,EAA+B,IAAnBd,EAAQe,QAAgBb,EAE1C,OACE,gCACGE,IAAS,uBAAIA,IACbU,IAAa,oEACbd,EAAQe,OAAS,IAChB,wBACGf,EAAQgB,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1B,OACE,2BACE,wBACE,oCAAYD,QAEd,uBAAIC,MAJGF,EAOZ,QAKV,C,2MC/CDG,IAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAGHC,EAAW,mCAAG,8FACZF,IAAAA,IAAA,qCAAwCC,IAD5B,mFAAH,qDAKXE,EAAmB,mCAAG,WAAMC,GAAN,iFACpBJ,IAAAA,IAAA,+BAAkCC,EAAlC,kBAAmDG,IAD/B,mFAAH,sDAKnBC,EAAiB,mCAAG,WAAMR,GAAN,iFAClBG,IAAAA,IAAA,gBAAmBH,EAAnB,oBAAiCI,IADf,mFAAH,sDAKjBK,EAAS,mCAAG,WAAMT,GAAN,iFACVG,IAAAA,IAAA,gBAAmBH,EAAnB,4BAAyCI,IAD/B,mFAAH,sDAKTX,EAAY,mCAAG,WAAMO,GAAN,iFACbG,IAAAA,IAAA,gBAAmBH,EAAnB,4BAAyCI,IAD5B,mFAAH,qD","sources":["components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchReviews } from 'services/api';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [isLoad, setIsLoad] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const {\n          data: { results },\n        } = await fetchReviews(movieId);\n\n        setReviews(results);\n        setIsLoad(true);\n      } catch (e) {\n        setError(e.message);\n      }\n    };\n    fetchData();\n  }, [movieId]);\n\n  const noReviews = reviews.length === 0 && isLoad;\n\n  return (\n    <>\n      {error && <p>{error}</p>}\n      {noReviews && <p>We don`t have any reviews for this movie</p>}\n      {reviews.length > 0 && (\n        <ul>\n          {reviews.map(({ id, author, content }) => {\n            return (\n              <li key={id}>\n                <p>\n                  <b>Author: {author}</b>\n                </p>\n                <p>{content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '827cb17c4a19aaac58b5a69a05bdba2b';\n\n// Поиск по трендам самых популярных фильмов на сегодня для создания коллекции на главной странице.\nexport const fetchTrends = async () => {\n  return await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n};\n\n// Поиск фильма по ключевому слову на странице фильмов\nexport const fetchMoviesBySearch = async name => {\n  return await axios.get(`search/movie?api_key=${API_KEY}&query=${name}`);\n};\n\n//  Поиск по ID - запрос полной информации о фильме для страницы кинофильма\nexport const fetchMovieDetails = async id => {\n  return await axios.get(`movie/${id}?api_key=${API_KEY}`);\n};\n\n// Запрос актеров\nexport const fetchCast = async id => {\n  return await axios.get(`movie/${id}/credits?api_key=${API_KEY}`);\n};\n\n// Запрос обзоров о фильме\nexport const fetchReviews = async id => {\n  return await axios.get(`movie/${id}/reviews?api_key=${API_KEY}`);\n};\n"],"names":["useState","reviews","setReviews","isLoad","setIsLoad","error","setError","movieId","useParams","useEffect","fetchData","fetchReviews","results","data","message","noReviews","length","map","id","author","content","axios","API_KEY","fetchTrends","fetchMoviesBySearch","name","fetchMovieDetails","fetchCast"],"sourceRoot":""}